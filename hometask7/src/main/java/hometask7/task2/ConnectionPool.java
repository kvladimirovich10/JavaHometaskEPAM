package hometask7.task2;import java.sql.*;import org.apache.commons.dbcp.*;import org.apache.commons.pool.impl.*;public class ConnectionPool {    private GenericObjectPool connectionPool = null;    public void initConnectionPool(String DB_DRIVER, String DB_CONNECTION, String DB_USER, String DB_PASSWORD) {        try {            try {                Class.forName(DB_DRIVER);            } catch (ClassNotFoundException e) {                System.out.println(e.getMessage());            }            connectionPool = new GenericObjectPool(null);            ConnectionFactory connectionFactory = new DriverManagerConnectionFactory(DB_CONNECTION, DB_USER, DB_PASSWORD);            new PoolableConnectionFactory(connectionFactory,                    connectionPool,                    null,                    "SELECT 1",                    false,                    true);            new PoolingDataSource(connectionPool);            connectionPool.setMaxIdle(10);            connectionPool.setMaxActive(300);        } catch (Exception ex) {            ex.printStackTrace();        }    }    public final Connection getConnection() {        try {            if (connectionPool.getMaxActive() <= connectionPool.getNumActive()) {                System.err.println("Connections limit is over!!!");            }            return (Connection) connectionPool.borrowObject();        } catch (Exception ex) {            ex.printStackTrace();            return null;        }    }    public final void returnConnection(Connection con) {        if (con == null) {            System.err.println("Returning NULL to pool!!!");            return;        }        try {            connectionPool.returnObject(con);        } catch (Exception ex) {            //...        }    }}