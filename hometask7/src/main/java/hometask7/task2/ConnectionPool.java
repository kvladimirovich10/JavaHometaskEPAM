package hometask7.task2;import jdk.internal.logger.BootstrapLogger;import javax.sql.ConnectionEventListener;import javax.sql.PooledConnection;import javax.sql.StatementEventListener;import java.io.Closeable;import java.io.IOException;import java.sql.Connection;import java.sql.DriverManager;import java.sql.SQLException;import java.util.ArrayList;import java.util.Iterator;import java.util.Locale;import java.util.concurrent.ArrayBlockingQueue;import java.util.concurrent.BlockingQueue;import java.util.function.Supplier;class ConnectionPool implements Supplier<Connection>, Closeable {    private BlockingQueue<hometask7.task2.PooledConnection> connectionQueue;    private String driverName;    private String url;    private String user;    private String password;    private int poolSize;    private BootstrapLogger logger;    private ConnectionPool() throws SQLException, ConnectionPoolException {        ArrayList<String> DBconnectionProp = Service.getPropValue();        driverName = DBconnectionProp.get(1);        url = DBconnectionProp.get(2);        user = DBconnectionProp.get(3);        password = DBconnectionProp.get(4);        poolSize = Integer.parseInt(DBconnectionProp.get(5));        try {            Class.forName(driverName);            connectionQueue = new ArrayBlockingQueue<>(poolSize);            for (int i = 0 ; i < poolSize ; i++) {                connectionQueue.add(                        new hometask7.task2.PooledConnection(DriverManager.getConnection(url, user, password),                                pooledConnection -> {                                    connectionQueue.offer(pooledConnection);                                }));            }        } catch (SQLException e) {            throw new ConnectionPoolException("SQLException in ConnectionPool", e);        } catch (ClassNotFoundException e) {            throw new ConnectionPoolException(                    "Can't find database driver class", e);        }    }    @Override    public Connection get() {        Connection connection = null;        try {            return connectionQueue.take();        } catch (InterruptedException e) {            try {                throw new ConnectionPoolException("Error connecting to the data source.", e);            } catch (ConnectionPoolException e1) {                e1.printStackTrace();            }        }        return connection;    }    @Override    public void close() throws IOException {        for (Iterator<hometask7.task2.PooledConnection> iterator = connectionQueue.iterator() ; iterator.hasNext();) {            try {                iterator.next().reallyClose();                iterator.remove();            } catch (SQLException e) {                logger.log(System.Logger.Level.ERROR, "Connection isn't return to the pool.");            }        }    }}