package hometask2.task2;import java.io.BufferedReader;import java.io.IOException;import java.util.List;import java.util.Random;enum Name {MARY, PATRICIA, LINDA, BARBARA, ELIZABETH, JENNIFER, MARIA, JAMES, JOHN, ROBERT, WILLIAM, DAVID, RICHARD, CHARLES, JOSEPH, CHRISTOPHER}enum LastName {    SMITH, JOHNSON, WILLIAMS, JONES, BROWN, DAVIS, MILLER, WILSON, MOORE, ANDERSON}class OfficeService {    static void addEmpl(Office office, Employee employee) {        office.getEmplList().add(employee);    }    static int generateId() {        return 0;    }    static void generateEmployees(Office office) {        Random random = new Random();        for (int i = 1 ; i < 10 ; i++) {            Employee employee = new Employee(i,                    Name.values()[random.nextInt(Name.values().length)],                    LastName.values()[random.nextInt(LastName.values().length)]);            office.getEmplList().add(employee);            for (int j = 0 ; j < 2 + random.nextInt(10) ; j++) {                Item item = new Item(Stationary.values()[random.nextInt(Stationary.values().length)],                        Color.values()[random.nextInt(Color.values().length)],                        10 + (100 - 10) * random.nextDouble(),                        1 + random.nextInt(5));                employee.getEmplStationary().add(item);            }        }    }    /**     * Method prints to a console all the stored notes in the note list     *     * @param employees - note list     * @return 0 if there is no notes in the notebook , 1 if it is not     * @throws IOException for BufferedReader     */    static int printEmployeeList(List<Employee> employees) throws IOException {        int i = 1;        if (employees.size() == 0) {            System.out.format("%n* no employees are added yet%n");            return 0;        } else {            System.out.println("ID  NAME           LAST NAME ");            for (Employee employee : employees) {                System.out.println(employee.getEmplId() + "   " +                        employee.getName() +                        createGap(15, employee.getName().name()) +                        employee.getLastName());            }        }        return 1;    }    /**     * Method selects a note from a note list by index from a console and calls method printNote     *     * @param employees - note list     * @param reader    - object of a class BufferedReader to read from a console     * @throws IOException for BufferedReader     */    static void chooseEmployee(List<Employee> employees, BufferedReader reader) throws IOException {        System.out.format("%n* type the employee ID to look through his or her item list | 0 - back to the menu%n");        int i = enterInt(reader);        if (i == 0)            return;        while (i < 0 || i > employees.size()) {            System.out.format("%n* can't find this employee, try again!%n");            i = Integer.parseInt(reader.readLine());        }        WorkDeskService.printStationaryList(employees.get(i));    }    /**     * Method reads a String from a console, tries to parse to int by calling method isInteger()     *     * @param reader - object of a class BufferedReader to read from a console     * @return parsed int from a String     * @throws IOException for BufferedReader     */    static int enterInt(BufferedReader reader) throws IOException {        String readLine = reader.readLine();        while (!isInteger(readLine)) {            System.out.println("Enter a valid number!");            readLine = reader.readLine();        }        return Integer.parseInt(readLine);    }    /**     * Method checks if a string can be parsed to int     *     * @param s - String to parse to int     * @return True if int, False if not     */    private static boolean isInteger(String s) {        try {            Integer.parseInt(s);        } catch (NumberFormatException | NullPointerException e) {            return false;        }        return true;    }    static String createGap(int space, String string) {        int gap = space - string.length();        String stringGap = "";        for (int j = 0 ; j < gap ; j++) {            stringGap += " ";        }        return stringGap;    }}